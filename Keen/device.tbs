include "global.tbh"

const SENSOR_SAMPLING_TIME=20 'one minutes
const EVENTS_SENDING_LOT=3

dim sample_timer as word=SENSOR_SAMPLING_TIME
dim event_post_timer as dword
dim sending_record_num as byte=0
dim led_pattern_index as byte=1
dim led_pattern as string
dim wkey,rkey,pjid as string
dim live_mode as no_yes=NO
dim temp as string(8)
dim light as string(4)
dim ts as string(32)
dim http_request_timeout as byte

declare sub device_led_play_pat()

declare sub str_to_time(byref ts_str as string(20),	
	byref time_daycount as word,
	byref time_mincount as word,
	byref time_second_byte as byte)
		
declare sub time_to_str(byref ts_str as string(20),	
	byref time_daycount as word,
	byref time_mincount as word,
	byref time_second_byte as byte)
	dim time_year_str, time_month_str, time_date_str, time_hour_str, time_minute_str, time_second_str as string(4)

declare function construct_events() as string


sub callback_dns_failure(status as en_dns_status_codes)

    http_dns_failure()

end sub
        
sub callback_dns_answer_acquired(return_type as en_dns_return_type, byref return_string as string)
    http_dns_answer_acquired(return_type, return_string)
    sys.debugprint("DNS:" + ddstr(return_string) + "\r\n")
	
end sub
        

sub callback_dns_ok()
    http_dns_ok()
	
end sub
        

sub callback_dns_pre_buffrq(num_of_pages_required as byte)
    
end sub
        

sub callback_dns_buff_released()
    
end sub
        
sub close_interface_sockets(interface as pl_sock_interfaces)
	dim f,sock_num_bup as byte
	dim i as word
	
	sock_num_bup=sock.num
	
	for f=0 to sock.numofsock-1
		sock.num=f
		if sock.currentinterface=interface and sock.statesimple<>PL_SSTS_CLOSED then
			sock.discard
		end if
	next f

	i=sys.timercount

wait_close_interface_sockets:
	for f=0 to sock.numofsock-1
		sock.num=f
		if sock.currentinterface=interface and sock.statesimple<>PL_SSTS_CLOSED and sys.timercount-i<3 and sys.timercount>=i then
			goto wait_close_interface_sockets
		end if
	next f

	sock.num=sock_num_bup
	
end sub
                

sub callback_wln_failure(wln_state as en_wln_status_codes)
    
end sub
        
sub callback_wln_ok()
    
end sub

sub callback_wln_starting_association()
   
end sub
        
sub callback_wln_pre_buffrq(required_buff_pages as byte)
    
end sub
        
sub callback_wln_mkey_progress_update(progress as byte)
    
end sub
        
sub callback_wln_rescan_result(current_rssi as byte, scan_rssi as byte, different_ap as no_yes)
    
end sub
        
sub callback_wln_rescan_for_better_ap()
    
end sub

            
sub callback_stg_error(byref stg_name_or_num as string,index as byte,status as en_stg_status_codes)
    
end sub
        
sub callback_stg_pre_get(byref stg_name_or_num as string,index as byte,byref stg_value as string)
    
end sub
        
sub callback_stg_post_set(byref stg_name_or_num as string, index as byte,byref stg_value as string)

    select case stg_name_or_num
	case "PAT":
		led_pattern=stg_value
		led_pattern_index=1
	case "WKEY":
		wkey=stg_value
	case "RKEY":
		rkey=stg_value
	case "PJID":
		pjid=stg_value
	case else:
	end select
end sub
        
function callback_stg_vm_read(address as word) as byte
    
end function
        
sub callback_stg_vm_write(data_to_write as byte, address as word)
    
end sub
sub callback_http_reponse_code_arrival(http_response as string)

end sub

sub callback_http_request_failed(error_message as string)
	sending_record_num=0
end sub

sub callback_http_header_arrival(header_type as string, header_value as string)
	
	if header_type="Date" then
		'Mon, 08 Feb 2021 03:16:19 GMT
		dim daycounts, mincounts as word
		dim curr_daycounts, curr_mincounts as word
		dim syear,smonth,sdate,shour,smin as string(4)
		dim b as byte
		
		syear=mid(header_value,15,2)
		smonth=mid(header_value,9,3)
		sdate=mid(header_value,6,2)
		shour=mid(header_value,18,2)
		smin=mid(header_value,21,2)
		
		select case smonth
		case "Jan": smonth="01"
		case "Feb": smonth="02"
		case "Mar": smonth="03"
		case "Apr": smonth="04"
		case "May": smonth="05"
		case "Jun": smonth="06"
		case "Jul": smonth="07"
		case "Aug": smonth="08"
		case "Sep": smonth="09"
		case "Oct": smonth="10"
		case "Nov": smonth="11"
		case "Dec": smonth="12"
		case else:
		end select
		daycounts=daycount(val(syear),val(smonth),val(sdate))
		mincounts=mincount(val(shour),val(smin))
		
		rtc.getdata(curr_daycounts,curr_mincounts, b)
		if curr_daycounts<>daycounts or curr_mincounts<>mincounts then
			rtc.setdata(daycounts,mincounts,b)
		end if
		
	end if
end sub

sub callback_http_headers_complete()

end sub

sub callback_http_content_arrival(data as string)
	dim i as byte
	
	if sending_record_num>0 then
		for i=1 to sending_record_num
			if instr(1,data,"{\x22success\x22: true}",i)=0 then
				pat.play("R-~",PL_PAT_CANINT)
				sample_timer=SENSOR_SAMPLING_TIME
				exit sub
			else
				pat.play("GGGG-",PL_PAT_CANINT)
			end if
		next i
		
		if live_mode=YES then exit sub
		
		if i-1=sending_record_num then
			tbl_select("events","events")
			for i=1 to sending_record_num
				tbl_record_delete(1)
			next i			
		end if
		
		dim active_rec_num as word
		tbl_select("events","events")
		tbl_get_num_records(active_rec_num,NO)
		
		if active_rec_num>0 then
			event_post_timer=1
		end if			
	end if
end sub

sub callback_http_post_data_sent_ok()
	
end sub

sub callback_http_send_post_data(remaining_content_length as dword)
	
end sub

sub callback_http_request_complete()
	sending_record_num=0
end sub

sub callback_http_response_code_arrival(http_response as string)

end sub

sub callback_http_open_romfile()

	romfile.open("keen_der.cer")
	
end sub

sub callback_http_pre_set_data(method as HTTP_REQUEST_METHODS, byref data as string)
	dim s as string
	dim b as byte
	dim key as string
	
	select case method
	case HTTP_GET:
		'read key		
		key=rkey
	case HTTP_POST, HTTP_PUT, HTTP_DELETE, HTTP_PATCH:
		'write key
		key=wkey
	case else
		exit sub
	end select
	
	if key="" then
		exit sub
	end if
	
	if instr(1,data,"HTTP/1.1\x0d\x0aHost:",1)>0 then
		b=instr(1,data,"\x0d\x0a\x0d\x0a",1)
		if b>0 then

			if method=HTTP_POST then
				s=left(data,b-1)
				sock.tlssetdata(s)
				sock.send()	
				data=construct_events()
				s=str(len(data))+"\x0d\x0aAuthorization: "+key+"\x0d\x0a\x0d\x0a"
			else
				s=left(data,b+1)
				sock.tlssetdata(s)
				sock.send()	
				s="Authorization: "+key+"\x0d\x0a\x0d\x0a"			
				data=right(data,len(data)-b-3)
			end if
		end if
		sock.tlssetdata(s)
		sock.send()
	end if
	
end sub

sub callback_luis_bt_connected()
    
end sub
        
sub callback_luis_bt_disconnected()
    
end sub
        
sub callback_luis_bt_enabled()
    
end sub
        
sub callback_luis_bt_disabled()
    
end sub
        
sub callback_luis_buzz_command()
    
end sub
        
sub callback_tbl_error(status as en_tbl_status_codes)
    
end sub
        
function callback_tbl_fail_to_open(byref filename as string, status as pl_fd_status_codes, filenum as byte) as no_yes
    
end function
        
sub callback_tbl_field_error(byref file_name as string,byref field_name as string,tbl_result as en_tbl_status_codes)
    
end sub
        
sub callback_tbl_modified(byref file_name as string, modified_operation as en_tbl_modified_operation)
    
end sub

public sub device_proc_timer()

	dim daycounts, mincounts as word
	dim seconds as byte
	dim tbl_result as en_tbl_status_codes	
	declare http_request_list as http_request_type
	
	device_led_play_pat()
	
	if sample_timer>0 and live_mode=NO then
		sample_timer=sample_timer-1
	else
		sample_timer=SENSOR_SAMPLING_TIME
		temp=ftostr(tbt29_get_c(TBT00_3_S1_CHANNEL_NUM),FTOSTR_MODE_AUTO,4)
		light=str(tbt28_get(TBT00_3_S1_CHANNEL_NUM))
		
		rtc.getdata(daycounts,mincounts,seconds)
		time_to_str(ts,daycounts,mincounts,seconds)
		sys.debugprint(ts+"\x0a"+temp+" C\x0a"+light+"\x0a")
		
		if live_mode=NO then
			tbl_result=tbl_select("events","events")
			tbl_result=tbl_field_sg("time",ts,EN_TBL_SET)
			tbl_result=tbl_field_sg("temp",temp,EN_TBL_SET)
			tbl_result=tbl_field_sg("light",light,EN_TBL_SET)
			tbl_result=tbl_record_add("")			
		end if
	end if
	
	if live_mode=NO then
		if event_post_timer>0 then
			event_post_timer=event_post_timer-1
		else
			event_post_timer=val(stg_get("EPT",0))
			event_post_timer=event_post_timer*120

			if sending_record_num=0 then 
				dim active_rec_num as word
				
				tbl_select("events","events")
				tbl_get_num_records(active_rec_num,NO)
				
				if active_rec_num>0 then
					http_request(HTTP_POST, "https://api.keen.io/3.0/projects/"+pjid+"/events", PL_SOCK_INTERFACE_WLN,"","application/json")
				end if			
			end if
		end if
	else
		if http_request_list.http_request_in_progress=false or http_request_timeout=0 then
			if sending_record_num=0 then
				http_request(HTTP_POST, "https://api.keen.io/3.0/projects/"+pjid+"/events", PL_SOCK_INTERFACE_WLN,"","application/json")
			end if
			http_request_timeout=20
		else
			if http_request_timeout>0 then http_request_timeout=http_request_timeout-1
		end if
	end if
end sub

sub time_to_str(byref ts_str as string(20),	
	byref time_daycount as word,
	byref time_mincount as word,
	byref time_second_byte as byte)
	dim time_year_str, time_month_str, time_date_str, time_hour_str, time_minute_str, time_second_str as string(4)

	time_year_str=str(year(time_daycount)+2000)
	time_month_str=str(month(time_daycount))
	time_date_str=str(date(time_daycount))
	time_hour_str=str(hours(time_mincount))
	time_minute_str=str(minutes(time_mincount))
	time_second_str=str(time_second_byte)

	if len(time_hour_str) < 2 then 
		time_hour_str="0"+time_hour_str 
	end if
	if len(time_minute_str) < 2 then 
		time_minute_str="0"+time_minute_str 
	end if
	if len(time_second_str) < 2 then 
		time_second_str="0"+time_second_str 
	end if
	if len(time_date_str) < 2 then 
		time_date_str="0"+time_date_str 
	end if
	if len(time_month_str) < 2 then 
		time_month_str="0"+time_month_str 
	end if
	ts_str=time_year_str+"-"+time_month_str+"-"+time_date_str+"T"+time_hour_str+":"+time_minute_str+":"+time_second_str
	
end sub

sub str_to_time(byref ts_str as string(20),	
	byref time_daycount as word,
	byref time_mincount as word,
	byref time_second_byte as byte)
	dim time_year, time_month,time_date,time_hour,time_min as byte
	dim time_year_str, time_month_str, time_date_str, time_hour_str, time_minute_str, time_second_str as string(4)
	
	time_year_str=left(ts_str,4)
	time_month_str=mid(ts_str,6,2)
	time_date_str=mid(ts_str,9,2)
	time_hour_str=mid(ts_str,12,2)
	time_minute_str=mid(ts_str,15,2)
	time_second_str=mid(ts_str,18,2)
	time_year=val(time_year_str)-2000
	time_month=val(time_month_str)
	time_date=val(time_date_str)
	time_daycount=daycount(time_year,time_month,time_date)
	time_hour=val(time_hour_str)
	time_min=val(time_minute_str)
	time_mincount=mincount(time_hour,time_min)
	time_second_byte=val(time_second_str)
	
end sub

function construct_events() as string
	dim rec_num as word=1

	construct_events="{\x22sensors\x22:["
	if live_mode=NO then
		tbl_select("events","events")
		while tbl_record_read_active(rec_num)=EN_TBL_STATUS_OK	
			rec_num=rec_num+1
			sending_record_num=sending_record_num+1
			tbl_field_sg("time",ts,EN_TBL_GET)
			tbl_field_sg("temp",temp,EN_TBL_GET)
			tbl_field_sg("light",light,EN_TBL_GET)
			ts=ts+".000Z"
			construct_events=construct_events+"{\x22time\x22:\x22"+ts+"\x22,\x22temperature\x22:"+temp+",\x22light\x22:"+light+"},"
			if sending_record_num>=EVENTS_SENDING_LOT then
				exit while
			end if
		wend
	else
		ts=ts+".000Z"
		construct_events=construct_events+"{\x22time\x22:\x22"+ts+"\x22,\x22temperature\x22:"+temp+",\x22light\x22:"+light+"},"
		sending_record_num=1
	end if

	if sending_record_num=0 then
		construct_events=""
	else
		construct_events=left(construct_events,len(construct_events)-1)+"]}"
	end if
	sys.debugprint(construct_events)
end function

sub set_rgb_led(r as byte ,g as byte ,b as byte)
	
	pwm.num =  PL_PWM_NUM_3
	pwm.dutycycle = r
    pwm.enabled = YES
    
	pwm.num =  PL_PWM_NUM_5
    pwm.dutycycle = g
	pwm.enabled = YES
    
	pwm.num =  PL_PWM_NUM_6
    pwm.dutycycle = b
	pwm.enabled = YES
    
end sub 

sub device_led_play_pat()
	dim p as string(1)
	
	if led_pattern_index>len(led_pattern) then
		exit sub
	end if
check_again:	
	p=mid(led_pattern,led_pattern_index,1)
	select case p
	case "R","r":
		set_rgb_led(0,100,100)
	case "G","g":
		set_rgb_led(100,0,100)
	case "B","b":
		set_rgb_led(100,100,0)
	case "~":
		if led_pattern_index=1 then
			exit sub
		else
			led_pattern_index=1
			goto check_again		
		end if
	case else:
		set_rgb_led(100,100,100)
	end select
	
	led_pattern_index=led_pattern_index+1
end sub

sub device_init_keen_io()
	wkey=stg_get("WKEY",0)
	rkey=stg_get("RKEY",0)
	pjid=stg_get("PJID",0) 	
end sub