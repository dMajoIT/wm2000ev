include "global.tbh"

const SENSOR_SAMPLING_TIME=20 'Every 10 seconds

dim sample_timer as word=SENSOR_SAMPLING_TIME
dim event_post_timer as dword
dim led_pattern_index as byte=1
dim led_pattern as string

declare sub time_to_str(byref ts_str as string(20),	
	byref time_daycount as word,
	byref time_mincount as word,
	byref time_second_byte as byte)


declare sub set_rgb_led(r as byte ,g as byte ,b as byte)
declare sub device_led_play_pat()

sub callback_dns_failure(status as en_dns_status_codes)
	http_dns_failure()
end sub
        
sub callback_dns_answer_acquired(return_type as en_dns_return_type, byref return_string as string)

    http_dns_answer_acquired(return_type, return_string)
    mqtt_dns_answer_acquired(return_type, return_string)
	
end sub 

sub callback_dns_ok()

end sub

sub callback_dns_pre_buffrq(num_of_pages_required as byte)
    
end sub
        
sub callback_dns_buff_released()
	sock_release(sock.num)
end sub
                  
sub callback_stg_error(byref stg_name_or_num as string,index as byte,status as en_stg_status_codes)
    
end sub
        
sub callback_stg_pre_get(byref stg_name_or_num as string,index as byte,byref stg_value as string)
    
end sub
        
sub callback_stg_post_set(byref stg_name_or_num as string, index as byte,byref stg_value as string)
    
end sub
        
function callback_stg_vm_read(address as word) as byte
    
end function
        
sub callback_stg_vm_write(data_to_write as byte, address as word)
    
end sub

sub callback_on_telemetry_sent()
	
end sub

sub callback_iothub_command_triggered(byref command as string, byref params as string)
	
	if command="LedTest" then
		led_pattern_index=1
		led_pattern=mid(params,2,len(params)-2)
	end if
	iothub_command_respond(command,"{}",EN_IOTHUB_OK)
end sub

public sub device_proc_timer()

	dim light, temp as string(36)
	
	device_led_play_pat()
	
	if sample_timer>0 then
		sample_timer=sample_timer-1
	else
		sample_timer=SENSOR_SAMPLING_TIME
		temp=ftostr(tbt29_get_c(TBT00_3_S1_CHANNEL_NUM),FTOSTR_MODE_AUTO,4)
		light=str(tbt28_get(TBT00_3_S1_CHANNEL_NUM))
		
		iothub_store_telemetry("temperature", temp)
		iothub_store_telemetry("light", light)
	end if 
	
end sub

sub callback_mqtt_connect_ok()
	iothub_on_connected()
	event_post_timer=1
end sub

sub callback_mqtt_connect_lost()

	iothub_on_disconnected()
end sub

sub callback_mqtt_sub_ok()
	
	iothub_mqtt_sub_ok()
	
end sub

sub callback_mqtt_notif(byref topic as string,byref data as string,remaining_bytes as dword)

	iothub_proc_mqtt_msg(topic,data)
end sub

sub callback_tbl_error(status as en_tbl_status_codes)
	
end sub

function callback_tbl_fail_to_open(byref filename as string, status as pl_fd_status_codes, filenum as byte) as no_yes
	
end function

sub callback_tbl_field_error(byref file_name as string,byref field_name as string,tbl_result as en_tbl_status_codes)
	
end sub

sub callback_tbl_modified(byref file_name as string, modified_operation as en_tbl_modified_operation)
	
end sub

sub callback_luis_bt_connected()
	
end sub

sub callback_luis_bt_disconnected()
	
end sub

sub callback_luis_bt_enabled()
	
end sub

sub callback_luis_bt_disabled()
	
end sub

sub callback_luis_buzz_command()
	
end sub



sub device_led_play_pat()
	dim p as string(1)
	
	if led_pattern_index>len(led_pattern) then
		exit sub
	end if
check_again:	
	p=mid(led_pattern,led_pattern_index,1)
	select case p
	case "R","r":
		set_rgb_led(0,100,100)
	case "G","g":
		set_rgb_led(100,0,100)
	case "B","b":
		set_rgb_led(100,100,0)
	case "~":
		if led_pattern_index=1 then
			exit sub
		else
			led_pattern_index=1
			goto check_again		
		end if
	case else:
		set_rgb_led(100,100,100)
	end select
	
	led_pattern_index=led_pattern_index+1
end sub

sub set_rgb_led(r as byte ,g as byte ,b as byte)
	
	pwm.num =  PL_PWM_NUM_3
	pwm.dutycycle = r
    pwm.enabled = YES
    
	pwm.num =  PL_PWM_NUM_5
    pwm.dutycycle = g
	pwm.enabled = YES
    
	pwm.num =  PL_PWM_NUM_6
    pwm.dutycycle = b
	pwm.enabled = YES
    
end sub 

sub callback_iothub_set_datetime(byref dt_string as string)
	
	'Mon, 08 Feb 2021 03:16:19 GMT
	dim daycounts, mincounts as word
	dim curr_daycounts, curr_mincounts as word
	dim syear,smonth,sdate,shour,smin,ssec as string(4)
	dim b as byte
	
	syear=mid(dt_string,15,2)
	smonth=mid(dt_string,9,3)
	sdate=mid(dt_string,6,2)
	shour=mid(dt_string,18,2)
	smin=mid(dt_string,21,2)
	ssec=mid(dt_string,24,2)
	
	select case smonth
	case "Jan": smonth="01"
	case "Feb": smonth="02"
	case "Mar": smonth="03"
	case "Apr": smonth="04"
	case "May": smonth="05"
	case "Jun": smonth="06"
	case "Jul": smonth="07"
	case "Aug": smonth="08"
	case "Sep": smonth="09"
	case "Oct": smonth="10"
	case "Nov": smonth="11"
	case "Dec": smonth="12"
	case else:
	end select
	daycounts=daycount(val(syear),val(smonth),val(sdate))
	mincounts=mincount(val(shour),val(smin))
	
	rtc.getdata(curr_daycounts,curr_mincounts, b)
	if curr_daycounts<>daycounts or curr_mincounts<>mincounts then
		b=val(ssec) 	
		rtc.setdata(daycounts,mincounts,b)
	end if
		
end sub

sub callback_iothub_device_assigned(byref assigned_hub as string)
	sys.debugprint(assigned_hub+"\x0d\x0a")
end sub

sub callback_iothub_dps_failed()
	
	sys.debugprint("dps connection failed\x0d\x0a")
end sub


sub callback_http_reponse_code_arrival(http_response as string)
end sub


sub callback_http_request_failed(error_message as string)
    
end sub


sub callback_http_header_arrival(header_type as string, header_value as string)

	iot_header_arrival(header_type, header_value)

end sub


sub callback_http_headers_complete()
end sub

sub callback_http_content_arrival(data as string)

	iot_content_arrival(data)
	
end sub

sub callback_http_send_headers()
    
	iot_send_headers()

end sub


sub callback_http_request_complete()
    
	iothub_http_request_complete()
	
end sub

function callback_http_open_romfile() as dword
    
	dim url as string = iothub_get_url()
	if http_request_item.url = url then
		callback_http_open_romfile=0
		romfile.open("azure.cer")
		callback_http_open_romfile=romfile.offset    
	end if
            
end function

sub callback_http_post_data_sent_ok()
end sub

sub callback_http_send_post_data(remaining_content_length as dword)
end sub

sub callback_http_response_code_arrival(http_response as string)
end sub 