include "global.tbh"
syscall(879) es256(byref key as string,byref payload as string, byref result as string)

const SENSOR_SAMPLING_TIME=20 'Every 10 seconds

dim sample_timer as word=SENSOR_SAMPLING_TIME
dim event_post_timer as dword
dim led_pattern_index as byte=1
dim led_pattern as string

declare sub time_to_str(byref ts_str as string(20),	
	byref time_daycount as word,
	byref time_mincount as word,
	byref time_second_byte as byte)

declare sub emulate_iot_device_telemetry()
declare sub set_rgb_led(r as byte ,g as byte ,b as byte)
declare sub device_led_play_pat()
declare sub base64_encode(byref input_str as string, byref result as string)
declare sub base64_decode(byref input as string, byref result as string)

sub callback_dns_failure(status as en_dns_status_codes)
	
end sub
        
sub callback_dns_answer_acquired(return_type as en_dns_return_type, byref return_string as string)
	iotcore_dns_answer_acquired(return_type,return_string)
	mqtt_dns_answer_acquired(return_type,return_string)
end sub 

sub callback_dns_ok()

end sub

sub callback_dns_pre_buffrq(num_of_pages_required as byte)
    
end sub
        
sub callback_dns_buff_released()
	sock_release(sock.num)
end sub
                  
sub callback_stg_error(byref stg_name_or_num as string,index as byte,status as en_stg_status_codes)
    
end sub
        
sub callback_stg_pre_get(byref stg_name_or_num as string,index as byte,byref stg_value as string)
    
end sub
        
sub callback_stg_post_set(byref stg_name_or_num as string, index as byte,byref stg_value as string)
	iotcore_update_state(stg_name_or_num, stg_value)
end sub
        
function callback_stg_vm_read(address as word) as byte
    
end function
        
sub callback_stg_vm_write(data_to_write as byte, address as word)
    
end sub

sub callback_on_telemetry_sent()
	dim active_rec_num as word	
	tbl_select("events","events")
	tbl_get_num_records(active_rec_num,NO)
	if active_rec_num>0 then
		event_post_timer=5
		tbl_record_delete(1)
	end if			

end sub

sub callback_iotcore_command_triggered(byref command as string, byref params as string)
	
	if command="LedTest" then
		led_pattern_index=1
		led_pattern=params
	end if
end sub

public sub device_proc_timer()
	dim daycounts, mincounts as word
	dim seconds as byte
	dim tbl_result as en_tbl_status_codes	
	dim ts, light, temp as string(36)
	
	device_led_play_pat()
	
	if sample_timer>0 then
		sample_timer=sample_timer-1
	else
		sample_timer=SENSOR_SAMPLING_TIME
		temp=ftostr(tbt29_get_c(TBT00_3_S1_CHANNEL_NUM),FTOSTR_MODE_AUTO,4)
		light=str(tbt28_get(TBT00_3_S1_CHANNEL_NUM))
		rtc.getdata(daycounts,mincounts,seconds)
		time_to_str(ts,daycounts,mincounts,seconds)
		ts=ts+".000Z"
		sys.debugprint(ts+"\x0a"+temp+" C\x0a"+light+"\x0a")	
		tbl_result=tbl_select("events","events")
		tbl_result=tbl_field_sg("time",ts,EN_TBL_SET)
		tbl_result=tbl_field_sg("temp",temp,EN_TBL_SET)
		tbl_result=tbl_field_sg("light",light,EN_TBL_SET)
		tbl_result=tbl_record_add("")			
	end if 

	if event_post_timer>0 then
		event_post_timer=event_post_timer-1
	else
		event_post_timer=val(stg_get("EPT",0))
		event_post_timer=event_post_timer*120
		dim active_rec_num as word			
		tbl_select("events","events")
		tbl_get_num_records(active_rec_num,NO)
		if active_rec_num>0 then
			emulate_iot_device_telemetry()
		end if			
	end if
	
end sub

sub emulate_iot_device_telemetry()

	if iotcore_state<>EN_IOTCORE_STATE_CONNECTED then
		exit sub
	end if

	dim ts, light, temp as string(36)
	
	tbl_select("events","events")
	if tbl_record_read_active(1)=EN_TBL_STATUS_OK	then
		tbl_field_sg("time",ts,EN_TBL_GET)
		tbl_field_sg("temp",temp,EN_TBL_GET)
		tbl_field_sg("light",light,EN_TBL_GET)
		iotcore_update_telemetry("temperature",temp)
		iotcore_update_telemetry("light",light)	
		iotcore_send_telemetry(ts)		
	end if	

end sub

sub callback_mqtt_connect_ok()
	iotcore_on_connected()
	event_post_timer=1
end sub

sub callback_mqtt_connect_lost()

	iotcore_on_disconnected()
end sub

sub callback_mqtt_sub_ok()
	
end sub

sub callback_mqtt_notif(byref topic as string,byref data as string,remaining_bytes as dword)

	iotcore_proc_mqtt_msg(topic,data)
end sub

sub callback_tbl_error(status as en_tbl_status_codes)
	
end sub

function callback_tbl_fail_to_open(byref filename as string, status as pl_fd_status_codes, filenum as byte) as no_yes
	
end function

sub callback_tbl_field_error(byref file_name as string,byref field_name as string,tbl_result as en_tbl_status_codes)
	
end sub

sub callback_tbl_modified(byref file_name as string, modified_operation as en_tbl_modified_operation)
	
end sub

sub callback_luis_bt_connected()
	
end sub

sub callback_luis_bt_disconnected()
	
end sub

sub callback_luis_bt_enabled()
	
end sub

sub callback_luis_bt_disabled()
	
end sub

sub callback_luis_buzz_command()
	
end sub

sub time_to_str(byref ts_str as string(20),	
	byref time_daycount as word,
	byref time_mincount as word,
	byref time_second_byte as byte)
	dim time_year_str, time_month_str, time_date_str, time_hour_str, time_minute_str, time_second_str as string(4)

	time_year_str=str(year(time_daycount)+2000)
	time_month_str=str(month(time_daycount))
	time_date_str=str(date(time_daycount))
	time_hour_str=str(hours(time_mincount))
	time_minute_str=str(minutes(time_mincount))
	time_second_str=str(time_second_byte)

	if len(time_hour_str) < 2 then 
		time_hour_str="0"+time_hour_str 
	end if
	if len(time_minute_str) < 2 then 
		time_minute_str="0"+time_minute_str 
	end if
	if len(time_second_str) < 2 then 
		time_second_str="0"+time_second_str 
	end if
	if len(time_date_str) < 2 then 
		time_date_str="0"+time_date_str 
	end if
	if len(time_month_str) < 2 then 
		time_month_str="0"+time_month_str 
	end if
	ts_str=time_year_str+"-"+time_month_str+"-"+time_date_str+"T"+time_hour_str+":"+time_minute_str+":"+time_second_str
	
end sub

sub device_led_play_pat()
	dim p as string(1)
	
	if led_pattern_index>len(led_pattern) then
		exit sub
	end if
check_again:	
	p=mid(led_pattern,led_pattern_index,1)
	select case p
	case "R","r":
		set_rgb_led(0,100,100)
	case "G","g":
		set_rgb_led(100,0,100)
	case "B","b":
		set_rgb_led(100,100,0)
	case "~":
		if led_pattern_index=1 then
			exit sub
		else
			led_pattern_index=1
			goto check_again		
		end if
	case else:
		set_rgb_led(100,100,100)
	end select
	
	led_pattern_index=led_pattern_index+1
end sub

sub set_rgb_led(r as byte ,g as byte ,b as byte)
	
	pwm.num =  PL_PWM_NUM_3
	pwm.dutycycle = r
    pwm.enabled = YES
    
	pwm.num =  PL_PWM_NUM_5
    pwm.dutycycle = g
	pwm.enabled = YES
    
	pwm.num =  PL_PWM_NUM_6
    pwm.dutycycle = b
	pwm.enabled = YES
    
end sub 

sub callback_iotcore_set_datetime(byref dt_string as string)
	dim daycounts, mincounts as word
	dim curr_daycounts, curr_mincounts as word
	dim syear,smonth,sdate,shour,smin,ssec as string(4)
	dim b as byte
	
	syear=mid(dt_string,15,2)
	smonth=mid(dt_string,9,3)
	sdate=mid(dt_string,6,2)
	shour=mid(dt_string,18,2)
	smin=mid(dt_string,21,2)
	ssec=mid(dt_string,24,2)
	
	select case smonth
	case "Jan": smonth="01"
	case "Feb": smonth="02"
	case "Mar": smonth="03"
	case "Apr": smonth="04"
	case "May": smonth="05"
	case "Jun": smonth="06"
	case "Jul": smonth="07"
	case "Aug": smonth="08"
	case "Sep": smonth="09"
	case "Oct": smonth="10"
	case "Nov": smonth="11"
	case "Dec": smonth="12"
	case else:
	end select
	daycounts=daycount(val(syear),val(smonth),val(sdate))
	mincounts=mincount(val(shour),val(smin))
	
	rtc.getdata(curr_daycounts,curr_mincounts, b)
	if curr_daycounts<>daycounts or curr_mincounts<>mincounts then
		b=val(ssec) 	
		rtc.setdata(daycounts,mincounts,b)
	end if
		
end sub

function device_jwt_generator(byref aud as string, byref key as string, expiresInMins as word) as string
	dim daycounts,mincounts as word
	dim seconds as byte
	dim iat, exp as dword
	dim result as string
	dim data1, data2 as string
	dim l as byte
	dim payload as string
	
	rtc.getdata(daycounts,mincounts,seconds) 'rtc.getdata returns the elapse time since 2000, we need the elapse time since 1970
	iat=daycounts*24*60+mincounts+15778080
	exp=daycounts*24*60+mincounts+15778080+expiresInMins
	iat=iat*60+seconds 
	exp=exp*60+seconds

	base64_encode("{\x22alg\x22:\x22ES256\x22,\x22typ\x22:\x22JWT\x22}",result)
	payload=result+"."
	result=""

	base64_encode("{\x22iat\x22:"+lstr(iat)+",\x22exp\x22:"+lstr(exp)+",\x22aud\x22:\x22"+aud+"\x22}",result)
	payload=payload+result
	result=""
	
	key=key+"\x00"
	es256(key, payload, result)
	'Parsing the numbers: 
	'Return is in ASN.1 standard 
	'Sequence    Length         Integer    Length   DATA1  Integer  Length     Data2
	'30          44             02         20       XXXXX  02       20         xxxxxx 	
	
	l=asc(mid(result,4,1))
	data1=mid(result,5,l)
	data2=right(result,32)
	
	data1=right(data1,32)
	'You will take  Data1 and Data2 as raw strings 
	dim s as string = data1 + data2 
	result=""
	
	'base64 encode s 
	base64_encode(s,result)
	's is your es256 in base 64 
	device_jwt_generator=payload+"."+result
end function

sub callback_wln_rescan_for_better_ap()

end sub 

sub callback_wln_rescan_result(current_rssi as byte, scan_rssi as byte, different_ap as no_yes)
	
end sub

sub callback_wln_starting_association()
	
end sub

sub  callback_wln_ok()

end sub 

sub callback_wln_failure(wln_state as en_wln_status_codes)
	
end sub