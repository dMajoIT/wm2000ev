include "global.tbh"


dim greenValue as string(8)="\x220\x22"
dim redValue as string(8)="\x22255\x22"
dim blueValue as string(8)="\x220\x22"

dim bGreen as word=0
dim bRed as word=0
dim bBlue as word=0


sub callback_wln_failure(wln_state as en_wln_status_codes)
    
end sub
        
sub callback_wln_ok()
    
end sub

sub callback_wln_starting_association()
    
end sub
        
sub callback_wln_pre_buffrq(required_buff_pages as byte)
    
end sub
        
sub callback_wln_mkey_progress_update(progress as byte)
    
end sub
        
sub callback_wln_rescan_result(current_rssi as byte, scan_rssi as byte, different_ap as no_yes)
    
end sub
        
sub callback_wln_rescan_for_better_ap()
    
end sub

            
sub callback_stg_error(byref stg_name_or_num as string,index as byte,status as en_stg_status_codes)
    
end sub
        
sub callback_stg_pre_get(byref stg_name_or_num as string,index as byte,byref stg_value as string)
    
end sub
        
sub callback_stg_post_set(byref stg_name_or_num as string, index as byte,byref stg_value as string)
    
end sub
        
function callback_stg_vm_read(address as word) as byte
    
end function
        
sub callback_stg_vm_write(data_to_write as byte, address as word)
    
end sub
sub callback_luis_bt_connected()
    
end sub
        
sub callback_luis_bt_disconnected()
    
end sub
        
sub callback_luis_bt_enabled()
    
end sub
        
sub callback_luis_bt_disabled()
    
end sub
        
sub callback_luis_buzz_command()
    
end sub
        
sub close_interface_sockets(interface as pl_sock_interfaces)
	dim f,sock_num_bup as byte
	dim i as word
	
	sock_num_bup=sock.num
	
	for f=0 to sock.numofsock-1
		sock.num=f
		if sock.currentinterface=interface and sock.statesimple<>PL_SSTS_CLOSED then
			sock.discard
		end if
	next f

	i=sys.timercount

wait_close_interface_sockets:
	for f=0 to sock.numofsock-1
		sock.num=f
		if sock.currentinterface=interface and sock.statesimple<>PL_SSTS_CLOSED and sys.timercount-i<3 and sys.timercount>=i then
			goto wait_close_interface_sockets
		end if
	next f

	sock.num=sock_num_bup	
end sub
		
sub init_rgb_led_io()
	pwm.num =  PL_PWM_NUM_3
    pwm.enabled = YES
    pwm.dutycycle = 0
    pwm.frequency = 1000
	 	
	pwm.num =  PL_PWM_NUM_5
    pwm.enabled = YES
    pwm.dutycycle = 0
    pwm.frequency = 1000
	
	pwm.num =  PL_PWM_NUM_6
    pwm.enabled = YES
    pwm.dutycycle = 0
    pwm.frequency = 1000 
	
	set_rgb_led(bRed,bGreen,bBlue)
end sub 

sub set_rgb_led(r as byte ,g as byte ,b as byte)
	
	pwm.num =  PL_PWM_NUM_3
	pwm.dutycycle = r
    pwm.enabled = YES
    
	pwm.num =  PL_PWM_NUM_5
    pwm.dutycycle = g
	pwm.enabled = YES
    
	pwm.num =  PL_PWM_NUM_6
    pwm.dutycycle = b
	pwm.enabled = YES
    
end sub 

public sub receive_data()
	dim s as string
	dim b as byte

	s=sock.httprqstring
	b=instr(1,s,"value=",1)+6
	s=mid(s,b,len(s)-b+1)
	if instr(1,sock.httprqstring,"id=redSlider",1) then
		redValue ="\x22"+s+"\x22"
		bRed=val(s)
		bRed=bRed*100/255
	end if

	if instr(1,sock.httprqstring,"id=greenSlider",1) then
		greenValue ="\x22"+s+"\x22"
		bGreen=val(s)
		bGreen=bGreen*100/255
	end if

	if instr(1,sock.httprqstring,"id=blueSlider",1) then
		blueValue ="\x22"+s+"\x22"	
		bBlue=val(s)
		bBlue=bBlue*100/255
	end if
	set_rgb_led(bRed,bGreen,bBlue)
end sub
